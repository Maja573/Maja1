import random
import os #do czyszczenia
import time #czas

print("Witaj użytkowniku")
nazwa = input("Podaj nazwę swojego węża: ")

# Plansza wąż
board = [
    ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"],
    ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#"]
]
ttt_board = [
    ["#", "#", "#", "#", "#", "#", "#"], 
    ["#", " ", "|", " ", "|", " ", "#"],
    ["#", "-", "+", "-", "+", "-", "#"],
    ["#", " ", "|", " ", "|", " ", "#"],
    ["#", "-", "+", "-", "+", "-", "#"],
    ["#", " ", "|", " ", "|", " ", "#"],
    ["#", "#", "#", "#", "#", "#", "#"]
]

game_over = False
direct = "UP"
lives = 3
score = 0
punkty = 0
obstacles = []
extra_obstacles = 3
multi_obstacle = False
licznik=3

def draw_ttt_board(board_state):
    print("Plansza:")
    for row in ttt_board:
        print("".join(row))

def update_ttt_board(row, col, player_symbol):
    mapping = {
        (0, 0): (1, 1),
        (0, 1): (1, 3),
        (0, 2): (1, 5),
        (1, 0): (3, 1),
        (1, 1): (3, 3),
        (1, 2): (3, 5),
        (2, 0): (5, 1),
        (2, 1): (5, 3),
        (2, 2): (5, 5)
    }
    mapped_row, mapped_col = mapping[(row, col)]
    ttt_board[mapped_row][mapped_col] = player_symbol

def check_winner(board_state):
    for i in range(3):
        #rzędy
        if board_state[i][0] == board_state[i][1] == board_state[i][2] != " ":
            return board_state[i][0]
        #kolumny
        if board_state[0][i] == board_state[1][i] == board_state[2][i] != " ":
            return board_state[0][i]
    #przekątne
    if board_state[0][0] == board_state[1][1] == board_state[2][2] != " ":
        return board_state[0][0]
    if board_state[0][2] == board_state[1][1] == board_state[2][0] != " ":
        return board_state[0][2]
    return None

def find_best_move(board_state, player):
    for row in range(3):
        for col in range(3):
            if board_state[row][col] == " ": #czy pusta
                board_state[row][col] = player
                if check_winner(board_state) == player:
                    board_state[row][col] = " "
                    return (row, col)
                board_state[row][col] = " "
    return None


def kolko_i_krzyzyk():
    board_state = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "O"
    print("Rozpoczynamy grę w kółko i krzyżyk!")
    draw_ttt_board(ttt_board)

    for turn in range(9):
        if current_player == "O":
            print("Twoja tura!")
            while True:
                try:
                    row = int(input("Wprowadź numer wiersza (1-3): ")) - 1 #bo od 0 zaczynamy
                    col = int(input("Wprowadź numer kolumny (1-3): ")) - 1
                    if board_state[row][col] == " ":
                        board_state[row][col] = current_player
                        update_ttt_board(row, col, current_player)
                        break
                    else:
                        print("To pole jest już zajęte. Spróbuj ponownie.")
                except (ValueError, IndexError): #jezeli źle wpisane
                    print("Nieprawidłowy wybór. Wprowadź liczby od 1 do 3.")
        else:
            print("Tura komputera!")
            # Wygraj, jeśli to możliwe
            best_move = find_best_move(board_state, "X")
            if not best_move:
            #Zablokuj gracza
                best_move = find_best_move(board_state, "O")
            if not best_move:
            #Wybierz losowe pole
                available_moves = [(i, j) for i in range(3) for j in range(3) if board_state[i][j] == " "]
                best_move = random.choice(available_moves)

            row, col = best_move
            board_state[row][col] = current_player
            update_ttt_board(row, col, current_player)

        draw_ttt_board(ttt_board)
        winner = check_winner(board_state)
        if winner:
            if winner == "X":
                print("Gratulacje! Wygrałeś!")
                time.sleep(4)
            else:
                print("Komputer wygrywa! Spróbuj ponownie.")
                time.sleep(4)

            

        current_player = "X" if current_player == "O" else "O"

    print("Remis! Nikt nie wygrał.")
    time.sleep(4)

# Funkcja do czyszczenia konsoli
def clear_console():
    os.system('cls' if os.name == 'nt' else 'clear')

# Funkcja do rysowania planszy
def draw_board(snake, apple, obstacles):
    clear_console()
    print(f"Twoja nazwa węża: {nazwa}")
    print(f"Liczba żyć: {lives}")
    print(f"Punkty: {punkty}")
    
    # Aktualizacja planszy
    for row in range(1, 19):
        for column in range(1, 39):
            if (row, column) in snake:
                board[row][column] = "O"  # Wąż
            elif (row, column) == apple:
                board[row][column] = "X"  # Jabłko
            elif (row, column) in obstacles:
                board[row][column] = "P"  # Przeszkody
            else:
                board[row][column] = " "  # Pusta przestrzeń
    
    # Wyświetlenie planszy nowej 
    for line in board:
        print("".join(line))



def reset_game(snake, obstacles, extra_obstacles):
    global apple, lives, score, direct, game_over, multi_obstacle #w calym kodzie do uzycia
    snake.append((random.randint(1, 18), random.randint(1, 38)))
    apple = (random.randint(1, 18), random.randint(1, 38))
    while apple in snake:
        apple = (random.randint(1, 18), random.randint(1, 38))
    for _ in range(extra_obstacles):
        new_obstacle = (random.randint(1, 18), random.randint(1, 38))
        while new_obstacle in snake or new_obstacle == apple or new_obstacle in obstacles:
            new_obstacle = random.randint(1, 18), random.randint(1, 38)
        obstacles.append(new_obstacle)
    lives = 3
    score = 0
    direct = "UP"
    multi_obstacle = True
    print("Rozpoczynamy nową grę!")
    time.sleep(2)

snake = [(random.randint(1, 18), random.randint(1, 38))]
apple = (random.randint(1, 18), random.randint(1, 38))
while apple in snake:
    apple = (random.randint(1, 18), random.randint(1, 38))



odpowiedz = input("Czy chcesz rozpocząć grę? (tak/nie): ").lower()
if odpowiedz == "tak":
    print("Rozpoczynamy grę!")
    time.sleep(3)
    game_over = False
else:
    print("Nie rozpoczynasz gry")
    game_over = True

# Pętla
while not game_over:
    draw_board(snake, apple, obstacles)

    #kierunki
    direction = input("Wprowadź kierunek (W/A/S/D): ").strip().upper()
    if direction == "W" and direct != "DOWN":
        direct = "UP"
    elif direction == "S" and direct != "UP":
        direct = "DOWN"
    elif direction == "A" and direct != "RIGHT":
        direct = "LEFT"
    elif direction == "D" and direct != "LEFT":
        direct = "RIGHT"

    # Przesunięcie węża
    head = snake[0]
    if direct == "UP":
        new_head = (head[0] - 1, head[1])
    elif direct == "DOWN":
        new_head = (head[0] + 1, head[1])
    elif direct == "LEFT":
        new_head = (head[0], head[1] - 1)
    elif direct == "RIGHT":
        new_head = (head[0], head[1] + 1)

    # kolizja
    if (
        new_head in snake
        or new_head[0] < 1
        or new_head[0] > 18
        or new_head[1] < 1
        or new_head[1] > 38
        or new_head in obstacles
    ):
        lives -= 1
        print(f"Straciłeś życie! Pozostało ci {lives} żyć.")
        time.sleep(2)
        if lives == 0:
            print("Game Over")
            game_over = True
        else:
            continue
    else:
        snake.insert(0, new_head)

    #czy wąż zjadł jabłko
    if new_head == apple:
        score += 1
        punkty +=1
        apple = (random.randint(1, 18), random.randint(1, 38))
        while apple in snake:
            apple = (random.randint(1, 18), random.randint(1, 38))
        new_obstacle = (random.randint(1, 18), random.randint(1, 38))
        while new_obstacle in snake or new_obstacle == apple or new_obstacle in obstacles:
            new_obstacle = random.randint(1, 18), random.randint(1, 38)
        obstacles.append(new_obstacle)
        if multi_obstacle:
            for _ in range(licznik):
                new_obstacle = (random.randint(1, 18), random.randint(1, 38))
                while new_obstacle in snake or new_obstacle == apple or new_obstacle in obstacles:
                    new_obstacle = random.randint(1, 18), random.randint(1, 38)
                obstacles.append(new_obstacle)
    else:
        snake.pop() 

    if score == 5:
        print(f"Gra skończona. Wąż {nazwa} ukończył poziom. Witamy w kolejnym levelu.")
        licznik +=1
        extra_obstacles += 2
        reset_game(snake, obstacles, extra_obstacles)
    
    if score == 19:
        print("Wygrałeś w zbieraniu jabłek, czas na walke z bosem.")
        time.sleep(3)
        kolko_i_krzyzyk()
        game_over=True




    # Opóźnienie
    time.sleep(0.2)
        
